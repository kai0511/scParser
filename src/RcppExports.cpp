// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/scParser_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// coordinate_descent
vec coordinate_descent(const mat& X, const vec& y, const vec& wstart, const double& lambda, const double& alpha, const mat& XtX, const vec& Xty, const double& tol);
RcppExport SEXP _SR2_coordinate_descent(SEXP XSEXP, SEXP ySEXP, SEXP wstartSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP XtXSEXP, SEXP XtySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vec& >::type wstart(wstartSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const vec& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(coordinate_descent(X, y, wstart, lambda, alpha, XtX, Xty, tol));
    return rcpp_result_gen;
END_RCPP
}
// strong_coordinate_descent
vec strong_coordinate_descent(const mat& X, const vec& y, const vec& wstart, const double& lambda, const double& alpha, const mat& XtX, const vec& Xty, const double& tol);
RcppExport SEXP _SR2_strong_coordinate_descent(SEXP XSEXP, SEXP ySEXP, SEXP wstartSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP XtXSEXP, SEXP XtySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vec& >::type wstart(wstartSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const vec& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(strong_coordinate_descent(X, y, wstart, lambda, alpha, XtX, Xty, tol));
    return rcpp_result_gen;
END_RCPP
}
// lagrange_dual
mat lagrange_dual(const mat& gram, const mat& cdx, const int& reg, const int& max_iter, const double& tol);
RcppExport SEXP _SR2_lagrange_dual(SEXP gramSEXP, SEXP cdxSEXP, SEXP regSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type gram(gramSEXP);
    Rcpp::traits::input_parameter< const mat& >::type cdx(cdxSEXP);
    Rcpp::traits::input_parameter< const int& >::type reg(regSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(lagrange_dual(gram, cdx, reg, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// tune_coding
void tune_coding(const mat& residual, const umat& indicator, mat& row_factor, const mat& c_factor, const double lambda, const double alpha, int tuning, int n_cores, double tol);
RcppExport SEXP _SR2_tune_coding(SEXP residualSEXP, SEXP indicatorSEXP, SEXP row_factorSEXP, SEXP c_factorSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP tuningSEXP, SEXP n_coresSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type residual(residualSEXP);
    Rcpp::traits::input_parameter< const umat& >::type indicator(indicatorSEXP);
    Rcpp::traits::input_parameter< mat& >::type row_factor(row_factorSEXP);
    Rcpp::traits::input_parameter< const mat& >::type c_factor(c_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    tune_coding(residual, indicator, row_factor, c_factor, lambda, alpha, tuning, n_cores, tol);
    return R_NilValue;
END_RCPP
}
// fit_coding
void fit_coding(const mat& residual, mat& row_factor, const mat& c_factor, const double lambda, const double alpha, int tuning, int n_cores, double tol);
RcppExport SEXP _SR2_fit_coding(SEXP residualSEXP, SEXP row_factorSEXP, SEXP c_factorSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP tuningSEXP, SEXP n_coresSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type residual(residualSEXP);
    Rcpp::traits::input_parameter< mat& >::type row_factor(row_factorSEXP);
    Rcpp::traits::input_parameter< const mat& >::type c_factor(c_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    fit_coding(residual, row_factor, c_factor, lambda, alpha, tuning, n_cores, tol);
    return R_NilValue;
END_RCPP
}
// optimize_base
void optimize_base(const mat& data, const umat& indicator, const mat& row_factor, mat& c_factor, const unsigned int& tuning, const double& tol, const unsigned int& iter);
RcppExport SEXP _SR2_optimize_base(SEXP dataSEXP, SEXP indicatorSEXP, SEXP row_factorSEXP, SEXP c_factorSEXP, SEXP tuningSEXP, SEXP tolSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const umat& >::type indicator(indicatorSEXP);
    Rcpp::traits::input_parameter< const mat& >::type row_factor(row_factorSEXP);
    Rcpp::traits::input_parameter< mat& >::type c_factor(c_factorSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type iter(iterSEXP);
    optimize_base(data, indicator, row_factor, c_factor, tuning, tol, iter);
    return R_NilValue;
END_RCPP
}
// partial_optimize
List partial_optimize(const mat& data, const umat& train_indicator, List& cfd_factors, mat column_factor, const umat& cfd_indicators, const double lambda1, const int tuning, const double global_tol, const unsigned int max_iter);
RcppExport SEXP _SR2_partial_optimize(SEXP dataSEXP, SEXP train_indicatorSEXP, SEXP cfd_factorsSEXP, SEXP column_factorSEXP, SEXP cfd_indicatorsSEXP, SEXP lambda1SEXP, SEXP tuningSEXP, SEXP global_tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const umat& >::type train_indicator(train_indicatorSEXP);
    Rcpp::traits::input_parameter< List& >::type cfd_factors(cfd_factorsSEXP);
    Rcpp::traits::input_parameter< mat >::type column_factor(column_factorSEXP);
    Rcpp::traits::input_parameter< const umat& >::type cfd_indicators(cfd_indicatorsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const int >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const double >::type global_tol(global_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(partial_optimize(data, train_indicator, cfd_factors, column_factor, cfd_indicators, lambda1, tuning, global_tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// optimize
List optimize(const mat& data, const umat& train_indicator, List& cfd_factors, mat column_factor, const umat& cfd_indicators, mat cell_factor, mat gene_factor, const double lambda1, const double lambda2, const double alpha, const int tuning, const double global_tol, const double sub_tol, const unsigned int max_iter);
RcppExport SEXP _SR2_optimize(SEXP dataSEXP, SEXP train_indicatorSEXP, SEXP cfd_factorsSEXP, SEXP column_factorSEXP, SEXP cfd_indicatorsSEXP, SEXP cell_factorSEXP, SEXP gene_factorSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP alphaSEXP, SEXP tuningSEXP, SEXP global_tolSEXP, SEXP sub_tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const umat& >::type train_indicator(train_indicatorSEXP);
    Rcpp::traits::input_parameter< List& >::type cfd_factors(cfd_factorsSEXP);
    Rcpp::traits::input_parameter< mat >::type column_factor(column_factorSEXP);
    Rcpp::traits::input_parameter< const umat& >::type cfd_indicators(cfd_indicatorsSEXP);
    Rcpp::traits::input_parameter< mat >::type cell_factor(cell_factorSEXP);
    Rcpp::traits::input_parameter< mat >::type gene_factor(gene_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const double >::type global_tol(global_tolSEXP);
    Rcpp::traits::input_parameter< const double >::type sub_tol(sub_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize(data, train_indicator, cfd_factors, column_factor, cfd_indicators, cell_factor, gene_factor, lambda1, lambda2, alpha, tuning, global_tol, sub_tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// batch_optimize
List batch_optimize(const mat& data, const List& cfd_factors, mat column_factor, const umat& cfd_indicators, mat cell_factor, mat gene_factor, const unsigned int num_batch, const unsigned int predefined_batch, const uvec batch_assignment, const double lambda1, const double lambda2, const double alpha, const double global_tol, const double sub_tol, const unsigned int max_iter);
RcppExport SEXP _SR2_batch_optimize(SEXP dataSEXP, SEXP cfd_factorsSEXP, SEXP column_factorSEXP, SEXP cfd_indicatorsSEXP, SEXP cell_factorSEXP, SEXP gene_factorSEXP, SEXP num_batchSEXP, SEXP predefined_batchSEXP, SEXP batch_assignmentSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP alphaSEXP, SEXP global_tolSEXP, SEXP sub_tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type cfd_factors(cfd_factorsSEXP);
    Rcpp::traits::input_parameter< mat >::type column_factor(column_factorSEXP);
    Rcpp::traits::input_parameter< const umat& >::type cfd_indicators(cfd_indicatorsSEXP);
    Rcpp::traits::input_parameter< mat >::type cell_factor(cell_factorSEXP);
    Rcpp::traits::input_parameter< mat >::type gene_factor(gene_factorSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type num_batch(num_batchSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type predefined_batch(predefined_batchSEXP);
    Rcpp::traits::input_parameter< const uvec >::type batch_assignment(batch_assignmentSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type global_tol(global_tolSEXP);
    Rcpp::traits::input_parameter< const double >::type sub_tol(sub_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_optimize(data, cfd_factors, column_factor, cfd_indicators, cell_factor, gene_factor, num_batch, predefined_batch, batch_assignment, lambda1, lambda2, alpha, global_tol, sub_tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// sample_optimize
List sample_optimize(const mat& data, const List& cfd_factors, mat column_factor, const umat& cfd_indicators, mat cell_factor, mat gene_factor, const unsigned int num_batch, const unsigned int predefined_batch, const uvec batch_assignment, const double lambda1, const double lambda2, const double alpha, const double global_tol, const double sub_tol, const unsigned int max_iter);
RcppExport SEXP _SR2_sample_optimize(SEXP dataSEXP, SEXP cfd_factorsSEXP, SEXP column_factorSEXP, SEXP cfd_indicatorsSEXP, SEXP cell_factorSEXP, SEXP gene_factorSEXP, SEXP num_batchSEXP, SEXP predefined_batchSEXP, SEXP batch_assignmentSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP alphaSEXP, SEXP global_tolSEXP, SEXP sub_tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type cfd_factors(cfd_factorsSEXP);
    Rcpp::traits::input_parameter< mat >::type column_factor(column_factorSEXP);
    Rcpp::traits::input_parameter< const umat& >::type cfd_indicators(cfd_indicatorsSEXP);
    Rcpp::traits::input_parameter< mat >::type cell_factor(cell_factorSEXP);
    Rcpp::traits::input_parameter< mat >::type gene_factor(gene_factorSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type num_batch(num_batchSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type predefined_batch(predefined_batchSEXP);
    Rcpp::traits::input_parameter< const uvec >::type batch_assignment(batch_assignmentSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type global_tol(global_tolSEXP);
    Rcpp::traits::input_parameter< const double >::type sub_tol(sub_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_optimize(data, cfd_factors, column_factor, cfd_indicators, cell_factor, gene_factor, num_batch, predefined_batch, batch_assignment, lambda1, lambda2, alpha, global_tol, sub_tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SR2_coordinate_descent", (DL_FUNC) &_SR2_coordinate_descent, 8},
    {"_SR2_strong_coordinate_descent", (DL_FUNC) &_SR2_strong_coordinate_descent, 8},
    {"_SR2_lagrange_dual", (DL_FUNC) &_SR2_lagrange_dual, 5},
    {"_SR2_tune_coding", (DL_FUNC) &_SR2_tune_coding, 9},
    {"_SR2_fit_coding", (DL_FUNC) &_SR2_fit_coding, 8},
    {"_SR2_optimize_base", (DL_FUNC) &_SR2_optimize_base, 7},
    {"_SR2_partial_optimize", (DL_FUNC) &_SR2_partial_optimize, 9},
    {"_SR2_optimize", (DL_FUNC) &_SR2_optimize, 14},
    {"_SR2_batch_optimize", (DL_FUNC) &_SR2_batch_optimize, 15},
    {"_SR2_sample_optimize", (DL_FUNC) &_SR2_sample_optimize, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_SR2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
